// Script para adicionar tokens especiais ao texto usando a API do Anthropic (Claude)

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import Anthropic from '@anthropic-ai/sdk';
import dotenv from 'dotenv';

// Carrega vari√°veis de ambiente do arquivo .env.generator
dotenv.config({ path: '.env.generator' });

// Obt√©m o diret√≥rio do m√≥dulo atual
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Configura√ß√µes do processamento
export const config = {
    maxRetries: 3     // N√∫mero m√°ximo de tentativas em caso de erro
};

/**
 * Processa uma linha JSON usando a API do Claude para adicionar tokens especiais
 * @param {string} line - Linha JSON a ser processada
 * @param {Anthropic} anthropic - Inst√¢ncia do cliente Anthropic
 * @param {number} lineNumber - N√∫mero da linha sendo processada (para logs)
 * @returns {Promise<string>} - Linha processada com tokens especiais
 */
async function processLine(line, anthropic, lineNumber) {
    let currentTry = 1;
    
    while (currentTry <= config.maxRetries) {
        try {
            console.log(`   üì§ Enviando conte√∫do para Claude (linha ${lineNumber}, tentativa ${currentTry}/${config.maxRetries})`);
            console.log(`   üìú Conte√∫do enviado: ${line}`); // Log do conte√∫do enviado
            
            // Cria o prompt para o Claude
            const prompt = `You are an expert in natural language processing and text markup. Your task is to add special XML tags to the text below, which contains information about words in Yanomami.

The text follows a specific format that compares two words in Yanomami, including their meanings, grammatical categories, uses, and examples.

Add the following XML tags to the text:
- <WORD>palavra_yanomami</WORD> - to mark words in Yanomami
- <POS>categoria_gramatical</POS> - for grammatical categories (Noun, Verb, Adjective, etc.)
- <DEFINITION>defini√ß√£o</DEFINITION> - for word definitions
- <EXAMPLES>exemplos</EXAMPLES> - for the examples section
- <EXAMPLE_YANOMAMI>exemplo_em_yanomami</EXAMPLE_YANOMAMI> - for examples in Yanomami
- <EXAMPLE_TRANSLATION>example_translation</EXAMPLE_TRANSLATION> - for example translations
- <YANOMAMI>yanomami_text</YANOMAMI> - for other Yanomami phrases
- <TRANSLATION>translation</TRANSLATION> - for translations
- <LITERAL>literal_translation</LITERAL> - for literal translations
- <RELATED_FORMS>related_forms</RELATED_FORMS> - for related forms
- <USAGE>usage</USAGE> - for usage information
- <GRAMMATICAL>grammatical_information</GRAMMATICAL> - for additional grammar information

Rules:
1. Preserve the format and original structure of the text
2. Do not add or remove information
3. Apply the tags consistently and accurately
4. Ensure that all tags are correctly closed
5. Do not use nested tags of the same type

Here is the text to mark:

${line}

Reply ONLY with the text marked, without additional explanations.`;

            // Cria uma promessa que rejeita ap√≥s 60 segundos
            let timeoutId;
            const timeout = new Promise((_, reject) => {
                timeoutId = setTimeout(() => {
                    reject(new Error('Requisi√ß√£o √† API expirou ap√≥s 60 segundos'));
                }, 60000);
            });

            // Faz a requisi√ß√£o √† API
            const apiRequest = anthropic.messages.create({
                model: process.env.DATASET_GEN_CLAUDE_MODEL || "claude-3-sonnet-20240229",
                max_tokens: 4096,
                messages: [{ role: "user", content: prompt }],
                temperature: 0.1
            });

            // Compete entre o timeout e a requisi√ß√£o √† API
            const response = await Promise.race([apiRequest, timeout]);
            clearTimeout(timeoutId); // Limpa o timeout se a requisi√ß√£o for bem-sucedida

            // Log da resposta recebida da API
            console.log(`   üì• Resposta recebida da API: ${JSON.stringify(response)}`);

            // Verifica se a resposta √© v√°lida
            if (!response.content || !Array.isArray(response.content) || response.content.length === 0) {
                throw new Error('Resposta da API n√£o est√° no formato esperado.');
            }

            // Extrai e retorna o texto processado
            const processedText = response.content[0].text.trim();
            console.log(`   üì• Resposta recebida de Claude para linha ${lineNumber}`);
            return processedText;
            
        } catch (error) {
            console.error(`   ‚ö†Ô∏è Erro na tentativa ${currentTry}/${config.maxRetries} para linha ${lineNumber}: ${error.message}`);
            
            if (currentTry < config.maxRetries) {
                // Espera um tempo antes de tentar novamente (backoff exponencial)
                const waitTime = Math.pow(2, currentTry) * 3000; // Aumentou o tempo de espera para 3 segundos
                console.log(`   ‚è±Ô∏è Aguardando ${waitTime/1000} segundos antes de tentar novamente...`);
                await new Promise(resolve => setTimeout(resolve, waitTime));
                currentTry++;
            } else {
                console.error(`   ‚ùå M√°ximo de tentativas atingido para linha ${lineNumber}, mantendo conte√∫do original`);
                return line; // Retorna a linha original ap√≥s esgotar as tentativas
            }
        }
    }
    
    // Caso todas as tentativas falhem
    return line;
}

/**
 * Verifica quais linhas j√° foram processadas no arquivo de sa√≠da
 * @param {string} outputFilePath - Caminho do arquivo de sa√≠da
 * @returns {Promise<number>} - N√∫mero de linhas j√° processadas
 */
async function checkProcessedLines(outputFilePath) {
    try {
        // Verifica se o arquivo de sa√≠da existe
        if (!fs.existsSync(outputFilePath)) {
            return 0; // Arquivo n√£o existe, nenhuma linha processada
        }
        
        // L√™ o arquivo de sa√≠da
        const outputContent = fs.readFileSync(outputFilePath, 'utf8');
        
        // Conta as linhas n√£o vazias
        const processedLines = outputContent.split('\n').filter(line => line.trim()).length;
        
        console.log(`   üîç Encontradas ${processedLines} linhas j√° processadas`);
        return processedLines;
    } catch (error) {
        console.error(`   ‚ö†Ô∏è Erro ao verificar linhas processadas: ${error.message}`);
        return 0; // Em caso de erro, assume que nenhuma linha foi processada
    }
}

/**
 * Processa um arquivo JSONL usando a API do Claude para adicionar tokens especiais
 * @param {string} inputFilePath - Caminho para o arquivo JSONL de entrada
 * @param {string} outputFilePath - Caminho para salvar a sa√≠da processada
 * @param {Anthropic} anthropic - Inst√¢ncia do cliente Anthropic
 * @returns {Promise<void>}
 */
async function processFile(inputFilePath, outputFilePath, anthropic) {
    try {
        console.log(`\nüìÑ Processando arquivo: ${inputFilePath}`);
        
        // L√™ o arquivo de entrada
        const fileContent = fs.readFileSync(inputFilePath, 'utf8');
        
        // Divide o conte√∫do por linhas para processar cada objeto JSON
        const lines = fileContent.split('\n').filter(line => line.trim());
        
        // Verifica quantas linhas j√° foram processadas
        const processedLines = await checkProcessedLines(outputFilePath);
        
        // Se todas as linhas j√° foram processadas, n√£o faz nada
        if (processedLines >= lines.length) {
            console.log(`   ‚úÖ Todas as ${lines.length} linhas j√° foram processadas anteriormente`);
            return;
        }
        
        // Cria um fluxo de escrita para o arquivo de sa√≠da (modo append se j√° existirem linhas processadas)
        const outputStream = fs.createWriteStream(outputFilePath, { flags: processedLines > 0 ? 'a' : 'w' });
        
        console.log(`   üîÑ Continuando processamento a partir da linha ${processedLines + 1} de ${lines.length}`);
        
        // Inicializa contadores e vari√°veis de progresso
        let successCount = 0;
        let errorCount = 0;
        let startTime = Date.now();
        let lastProgressUpdate = startTime;
        
        // Processa as linhas individualmente, come√ßando de onde parou
        for (let i = processedLines; i < lines.length; i++) {
            try {
                // Mostra progresso a cada 5 segundos
                const currentTime = Date.now();
                if (currentTime - lastProgressUpdate > 5000) {
                    const progress = Math.round(((i - processedLines) / (lines.length - processedLines)) * 100);
                    const elapsedMinutes = Math.round((currentTime - startTime) / 60000);
                    console.log(`   üìä Progresso: ${progress}% (${i + 1}/${lines.length}) - Tempo decorrido: ${elapsedMinutes} minutos`);
                    lastProgressUpdate = currentTime;
                }
                
                // Parse a linha original como JSON
                const jsonObj = JSON.parse(lines[i]);
                
                // Verifica se o objeto tem a estrutura esperada
                if (!jsonObj.messages || !Array.isArray(jsonObj.messages)) {
                    console.warn(`   ‚ö†Ô∏è Linha ${i + 1}: Formato inesperado, mantendo original`);
                    outputStream.write(lines[i] + '\n');
                    errorCount++;
                    continue;
                }
                
                // Encontra as mensagens do usu√°rio e do assistente
                const userMessage = jsonObj.messages.find(msg => msg.role === 'user');
                const assistantMessage = jsonObj.messages.find(msg => msg.role === 'assistant');
                
                if (!userMessage || !assistantMessage) {
                    console.warn(`   ‚ö†Ô∏è Linha ${i + 1}: Mensagens incompletas, mantendo original`);
                    outputStream.write(lines[i] + '\n');
                    errorCount++;
                    continue;
                }
                
                // Adiciona tokens especiais √† consulta do usu√°rio
                const wordsInQuery = userMessage.content.match(/'([^']+)'/g) || [];
                wordsInQuery.forEach(word => {
                    const cleanWord = word.replace(/'/g, '');
                    userMessage.content = userMessage.content.replace(word, `<WORD>${cleanWord}</WORD>`);
                });
                
                try {
                    // Processa a resposta do assistente usando Claude
                    const processedContent = await processLine(assistantMessage.content, anthropic, i + 1);
                    assistantMessage.content = processedContent;
                    
                    // Escreve a linha processada no fluxo de sa√≠da
                    const processedJsonLine = JSON.stringify(jsonObj);
                    outputStream.write(processedJsonLine + '\n');
                    console.log(`   ‚úÖ Linha ${i + 1} processada com sucesso`);
                    successCount++;
                } catch (apiError) {
                    console.error(`   ‚ö†Ô∏è Erro na API ao processar linha ${i + 1}: ${apiError.message}`);
                    console.log(`   üîÑ Tentando novamente em 5 segundos...`);
                    
                    // Espera 5 segundos antes de tentar novamente
                    await new Promise(resolve => setTimeout(resolve, 5000));
                    
                    try {
                        // Segunda tentativa
                        const processedContent = await processLine(assistantMessage.content, anthropic, i + 1);
                        assistantMessage.content = processedContent;
                        
                        // Escreve a linha processada no fluxo de sa√≠da
                        const processedJsonLine = JSON.stringify(jsonObj);
                        outputStream.write(processedJsonLine + '\n');
                        console.log(`   ‚úÖ Linha ${i + 1} processada com sucesso na segunda tentativa`);
                        successCount++;
                    } catch (retryError) {
                        console.error(`   ‚ùå Falha na segunda tentativa para linha ${i + 1}: ${retryError.message}`);
                        outputStream.write(lines[i] + '\n'); // Mant√©m a linha original em caso de erro
                        errorCount++;
                    }
                }
            } catch (error) {
                console.error(`   ‚ùå Erro ao processar linha ${i + 1}: ${error.message}`);
                outputStream.write(lines[i] + '\n'); // Mant√©m a linha original em caso de erro
                errorCount++;
            }
        }
        
        // Calcula o tempo total de processamento
        const totalTime = Math.round((Date.now() - startTime) / 60000);
        
        // Exibe resumo do processamento
        console.log(`\nüìä Resumo do processamento:`);
        console.log(`   ‚úÖ Linhas processadas com sucesso: ${successCount}`);
        console.log(`   ‚ùå Linhas com erro: ${errorCount}`);
        console.log(`   üïí Tempo total: ${totalTime} minutos`);
        console.log(`   üíæ Arquivo de sa√≠da: ${outputFilePath}`);
        
        // Fecha o fluxo de escrita ap√≥s o processamento
        outputStream.end();
        console.log(`\n‚úÖ Processamento conclu√≠do com sucesso!`);
        
    } catch (error) {
        console.error(`\n‚ùå Erro ao processar arquivo: ${error.message}`);
        throw error;
    }
}

/**
 * Verifica se um diret√≥rio existe e o cria se n√£o existir
 * @param {string} dir - Caminho do diret√≥rio a ser verificado/criado
 * @returns {void}
 */
function ensureDirectoryExists(dir) {
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
        console.log(`üìÅ Diret√≥rio criado: ${dir}`);
    }
}

/**
 * Fun√ß√£o principal para processar arquivos com tokens especiais
 * @param {string[]} [specificFiles] - Arquivos espec√≠ficos para processar (opcional)
 */
async function main(specificFiles) {
    try {
        console.log('üöÄ Iniciando adi√ß√£o de tokens especiais usando Claude...');
        
        // Define diret√≥rios de entrada e sa√≠da
        const inputDir = path.resolve(__dirname, '../ai-dataset-generator/input/add_special_token');
        const outputDir = path.resolve(__dirname, '../ai-dataset-generator/output/with_special_tokens_claude');
        
        // Verifica se o diret√≥rio de entrada existe
        if (!fs.existsSync(inputDir)) {
            console.error(`‚ùå Diret√≥rio de entrada n√£o encontrado: ${inputDir}`);
            console.log(`üìÅ Criando diret√≥rio de entrada...`);
            ensureDirectoryExists(inputDir);
            console.log(`‚ÑπÔ∏è Coloque seus arquivos JSONL no diret√≥rio de entrada e execute novamente.`);
            return;
        }
        
        // Cria o diret√≥rio de sa√≠da se n√£o existir
        ensureDirectoryExists(outputDir);
        
        // Verifica a chave da API
        if (!process.env.DATASET_GEN_ANTHROPIC_KEY) {
            console.error(`‚ùå Chave da API Anthropic n√£o encontrada no arquivo .env.generator`);
            console.log(`‚ÑπÔ∏è Crie um arquivo .env.generator na raiz do projeto com a vari√°vel DATASET_GEN_ANTHROPIC_KEY`);
            return;
        }
        
        // Inicializa o cliente Anthropic
        const anthropic = new Anthropic({
            apiKey: process.env.DATASET_GEN_ANTHROPIC_KEY
        });
        
        // Define o modelo a ser usado (padr√£o: claude-3-sonnet-20240229)
        const modelName = process.env.DATASET_GEN_CLAUDE_MODEL || 'claude-3-sonnet-20240229';
        console.log(`ü§ñ Usando modelo: ${modelName}`);
        
        // Determina quais arquivos processar
        let filesToProcess = [];
        
        if (specificFiles && specificFiles.length > 0) {
            // Processa apenas os arquivos especificados
            filesToProcess = specificFiles.map(file => {
                // Adiciona a extens√£o .jsonl se n√£o estiver presente
                if (!file.endsWith('.jsonl')) {
                    return `${file}.jsonl`;
                }
                return file;
            }).filter(file => {
                const exists = fs.existsSync(path.join(inputDir, file));
                if (!exists) {
                    console.warn(`‚ö†Ô∏è Arquivo n√£o encontrado: ${file}`);
                }
                return exists;
            });
        } else {
            // Obt√©m todos os arquivos JSONL no diret√≥rio de entrada
            filesToProcess = fs.readdirSync(inputDir)
                .filter(file => file.endsWith('.jsonl'));
        }
        
        if (filesToProcess.length === 0) {
            console.log('‚ö†Ô∏è Nenhum arquivo JSONL encontrado para processar.');
            return;
        }
        
        console.log(`üìã Encontrado(s) ${filesToProcess.length} arquivo(s) JSONL para processar:`);
        filesToProcess.forEach(file => console.log(`   - ${file}`));
        
        // Processa cada arquivo
        for (const file of filesToProcess) {
            const inputFilePath = path.join(inputDir, file);
            const outputFilePath = path.join(outputDir, file);
            await processFile(inputFilePath, outputFilePath, anthropic);
        }
        
        console.log('üéâ Todos os arquivos foram processados com sucesso!');
        
    } catch (error) {
        console.error(`‚ùå Erro na fun√ß√£o principal: ${error.message}`);
        process.exit(1);
    }
}

// Processa argumentos da linha de comando
const args = process.argv.slice(2);

// Se houver argumentos, usa-os como nomes de arquivos espec√≠ficos para processar
if (args.length > 0) {
    console.log(`‚ÑπÔ∏è Processando arquivos espec√≠ficos: ${args.join(', ')}`);
    main(args);
} else {
    // Caso contr√°rio, processa todos os arquivos no diret√≥rio
    main();
}
